distinct() %>%
summarise(count(Participant_ID_anonymised2))
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
count(Participant_ID_anonymised2)
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
n_distinct(Participant_ID_anonymised2)
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised2))
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised1))
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised))
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised2))
sm_norms2a %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised2))
library(tidyverse)
library(jsonlite)
recall_stimuli <- read_delim("Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli/stimuli_list.csv")
recall_stimuli <- read_delim("Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli/stimuli_list.csv")
paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n") %>%
write_file(file = "stimuli.js")
for (i in distinct(recall_stimuli$List)) {
paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n") %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
for (i in unique(recall_stimuli$List)) {
paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n") %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n")
test1 <- paste0(test1, test)
test1 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n")
test1 <- paste0(test1, test)
test1 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty=TRUE),
";\n\n")
test1 <- paste0(test1, test)
test1 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- paste0(test1, test)
test1 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
}
recall_stimuli %>%
group_by(List) %>%
count()
recall_stimuli %>%
group_by(List, WordOrder) %>%
count()
recall_stimuli %>%
group_by(List, Predictability) %>%
count()
recall_stimuli %>%
group_by(List, WordOrder, Predictability, QuesType) %>%
count()
recall_stimuli %>%
group_by(List, WordOrder, Predictability, QuesType) %>%
count() %>%
print(n = Inf)
recall_stimuli %>%
group_by(List, WordOrder, Predictability, QuesType) %>%
count() %>%
View()
recall_stimuli %>%
group_by(List, ItemID) %>%
count() %>%
View()
recall_stimuli %>%
group_by(List) %>%
count() %>%
View()
paste0(toJSON(unique(recall_stimuli$Filename)))
paste0(toJSON(unique(recall_stimuli$Filename),
pretty = TRUE))
test2 <- paste0(test1, "/n/n",
"var audio_files = ",
toJSON(unique(recall_stimuli$Filename),
pretty = TRUE))
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
test2 <- paste0(test1, "\n\n;",
"var audio_files = ",
toJSON(unique(recall_stimuli$Filename),
pretty = TRUE))
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
test2 <- paste0(test1, "\n\n",
"var audio_files = ",
toJSON(unique(recall_stimuli$Filename),
pretty = TRUE),
";\n\n")
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
recall_stimuli %>%
mutate(data = list(everything()))
recall_stimuli %>%
mutate(data = list(1:10))
recall_stimuli %>%
mutate(data = list(Filename:Question))
recall_stimuli %>%
mutate(data = nest(Filename:Question))
recall_stimuli %>%
nest(data = Filename:Question)
recall_stimuli %>%
nest()
recall_stimuli %>%
nest_join()
recall_stimuli %>%
nest_join(recall_stimuli)
recall_stimuli %>%
nest_join(data = recall_stimuli)
recall_stimuli %>%
nest_join(recall_stimuli) %>%
toJSON(pretty =  TRUE)
recall_stimuli %>%
map(nest, data = everything())
recall_stimuli %>%
lapply(nest, data = everything())
recall_stimuli %>%
group_by_all() %>%
nest()
recall_stimuli %>%
group_by_all() %>%
nest() %>%
toJSON(pretty =  TRUE)
recall_stimuli %>%
group_by_all() %>%
nest(data = everything()) %>%
toJSON(pretty =  TRUE)
recall_stimuli %>%
group_by_all() %>%
nest(data = everything())
recall_stimuli %>%
group_by_all() %>%
nest(data = everything()) %>%
toJSON(pretty =  TRUE)
recall_stimuli %>%
group_by_all() %>%
nest()
test1a <- recall_stimuli %>%
group_by_all() %>%
nest()
View(test1a)
View(test1a[[11]][[1]])
test1a <- recall_stimuli %>%
map_if(is.data.frame, list)
test1a <- recall_stimuli %>%
mutate(data = recall_stimuli)
test1a <- recall_stimuli %>%
mutate(data = nest(recall_stimuli))
View(test1a[[11]][[1]])
test1a <- recall_stimuli %>%
mutate(data = nest(data = everything()))
test1a <- recall_stimuli %>%
group_by_all() %>%
mutate(data = nest())
test1a <- recall_stimuli %>%
group_by_all() %>%
mutate(data = nest(recall_stimuli))
View(test1a[[11]][[1]])
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(data = list(c_across()))
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(data = list(c_across(everything())))
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(data = nest(c_across(everything())))
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(data = nest())
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(data = nest(.))
View(test1a[[11]][[1]])
test1a <- recall_stimuli %>%
rowwise() %>%
nest(data = everything())
View(test1a[[1]][[1]])
test1a <- recall_stimuli %>%
rowwise() %>%
mutate(nest(data = everything()))
test1a <- recall_stimuli %>%
nest(data = everything(), .by = everything())
View(test1a[[11]][[1]])
test1a <- recall_stimuli %>%
nest(data = everything(), .by = everything()) %>%
toJSON(pretty =  TRUE)
recall_stimuli %>%
nest(data = everything(), .by = everything()) %>%
toJSON(pretty =  TRUE)
test1a <- recall_stimuli %>%
nest(data = everything(), .by = everything())
recall_stimuli <- read_delim("~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli/stimuli_list.csv") %>%
nest(data = everything(), .by = everything())
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- paste0(test1, test)
}
test2 <- paste0(test1, "\n\n",
"var audio_files = ",
toJSON(unique(recall_stimuli$Filename),
pretty = TRUE),
";\n\n")
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
recall_stimuli <- read_delim("~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli/stimuli_list.csv") %>%
mutate(audio_filename = ifelse(Type == "Practice", paste0("stimuli/practice/", Filename),
ifelse(Type == "exp", paste0("stimuli/items/", Filename),
ifelse(Type == "filler", paste0("stimuli/fillers/", Filename), "XXX")))) %>%
nest(data = everything(), .by = everything())
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- paste0(test1, test)
}
test2 <- paste0(test1, "\n\n",
"var audio_files = ",
toJSON(unique(recall_stimuli$Filename),
pretty = TRUE),
";\n\n")
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- paste0(test1, test)
}
test2 <- paste0(test1, "\n\n",
"var audio_files = ",
toJSON(unique(recall_stimuli$audio_filename),
pretty = TRUE),
";\n\n")
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
recall_stimuli <- read_delim("~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli/stimuli_list.csv") %>%
mutate(audio_filename = ifelse(Type == "practice", paste0("stimuli/practice/", Filename),
ifelse(Type == "exp", paste0("stimuli/items/", Filename),
ifelse(Type == "filler", paste0("stimuli/fillers/", Filename), "XXX")))) %>%
nest(data = everything(), .by = everything())
test1 <- ""
for (i in unique(recall_stimuli$List)) {
test <- paste0("var ", i, " = ",
toJSON(recall_stimuli %>%
filter(List == i),
pretty = TRUE, na = "string"),
";\n\n")
test1 <- paste0(test1, test)
}
test2 <- paste0(test1, "\n\n",
"var audio_files = ",
toJSON(unique(recall_stimuli$audio_filename),
pretty = TRUE),
";\n\n")
test2 %>%
write_file(file = "~/Documents/jatos_mac_java/study_assets_root/_recall_spoken/stimuli.js")
sm_norms2a %>%
filter(is.na(Participant_ID_anonymised)) %>%
select(-Word, -Dimension, -Rating) %>%
distinct() %>%
summarise(n_distinct(Participant_ID_anonymised2))
sm_norms2 %>%
distinct(Age) %>%
summary()
library(tidyverse)
library(lsa)
library(rgl)
library(LSAfun)
options(rgl.useNULL=TRUE)
library(tidyverse)
library(lsa)
library(rgl)
library(LSAfun)
norms_all <- read_rds("~/Downloads/sociolex_norms_18_30_participants.rds")
#make an object with the proportion data
tvec <- norms_all %>%
select(`-3_prop_gender`:`3_prop_political`, `0_6`:`žádný`)
#give the object row names containing the words
row.names(tvec) <- norms_all %>%
pull(word)
#you can check the cosine similarity between 2 words
Cosine("babička", "Božena", tvectors = tvec)
#multiple words
multicos(c("babička", "Božena", "fetovat"), tvectors = tvec)
#nearest neighbour
neighbors("babička", n = 6, tvectors = tvec)
neighbors("školka", n = 6, tvectors = tvec)
neighbors("kostel", n = 6, tvectors = tvec)
neighbors("empatická", n = 6, tvectors = tvec)
neighbors("tweetovat", n = 6, tvectors = tvec)
plot_neighbors("babička", n = 6, tvectors = tvec, dims = 3)
demo(rgl)
remove.packages("rgl", "lsa", "lsafun")
remove.packages("rgl", "lsa", "LSAfun")
remove.packages("rgl")
remove.packages("lsa")
remove.packages("LSAfun")
install.packages("rgl")
install.packages("lsa")
install.packages("LSAfun")
library(tidyverse)
library(tidyverse)
library(lsa)
library(rgl)
library(LSAfun)
library(rgl)
options(rgl.useNULL=TRUE)
library(rgl)
remove.packages("rgl")
#this line of code is important and sets the working directory
#(which is the folder that contains all the files required for your code to work)
#please make sure you run this line of code first
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#this line of code is important and sets the working directory
#(which is the folder that contains all the files required for your code to work)
#please make sure you run this line of code first
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#this line of code is important and sets the working directory
#(which is the folder that contains all the files required for your code to work)
#please make sure you run this line of code first
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("/Users/james/Library/CloudStorage/OneDrive-Filozofickáfakulta,UniverzitaKarlova/Conducting_experimental_research_online_2024/Lectures/week_8/tidyverse")
library(tidyverse)
library(skimr)
library(readxl)
library(ggtext)
ercel_data_raw <- read_csv("Data/ercel_questionnaire_data.csv")
skim(ercel_data_raw)
ercel_data_raw <- read_csv("Data/ercel_questionnaire_data.csv")
View(ercel_data_raw)
ercel_data_raw %>% #use this data
names() %>% #get the column names
str_to_upper() #make them all upper case
ercel_data_raw %>%
select(-Recipient_Last_Name,
-Recipient_First_Name,
-Recipient_Email) %>%
names()
ercel_data_raw %>%
select(Recipient_Last_Name,
Recipient_First_Name,
Recipient_Email) %>%
names()
ercel_data_raw_useless_variables <- ercel_data_raw %>%
select(Recipient_Last_Name,
Recipient_First_Name,
Recipient_Email) %>%
names()
ercel_data_raw_useless_variables <- ercel_data_raw %>%
select(Recipient_Last_Name,
Recipient_First_Name,
Recipient_Email)
View(ercel_data_raw_useless_variables)
ercel_data_raw %>%
select(starts_with("day"))
ercel_data_raw %>%
select(starts_with("day")) %>%
names()
ercel_data_raw %>%
select(!starts_with("day")) %>%
names()
translations <- c("hello", "guten tag")
ercel_data_raw %>%
filter(vaše_jméno != "anonymised18")
ercel_data_filtered <- ercel_data_raw %>%
filter(vaše_jméno != "anonymised18")
ercel_data_clean <- ercel_data_raw %>%
filter(Finished == TRUE) %>% #remove the participant who did not finish
select(vaše_jméno, starts_with("day")) #only keep these variables
View(ercel_data_clean)
#make the ercel_data_clean data long
ercel_data_long <- ercel_data_clean %>%
pivot_longer(cols = starts_with("day"),
names_to = "day",
values_to = "time")
View(ercel_data_long)
#make the time variable have separate rows for each values
ercel_data_long_rows <- ercel_data_long %>%
separate_rows(time,
sep = ",")
View(ercel_data_long_rows)
str_remove("Ross_friends_pivot", pattern = "_friends_pivot")
#remove the "day_" prefix from the the day column"
ercel_data_long_rows <- ercel_data_long_rows %>%
mutate(day = str_remove(string = day,
pattern = "day_"))
#create the final data using different processing steps
ercel_data <- read_csv(file = "Data/ercel_questionnaire_data.csv") %>%
filter(Finished == TRUE) %>%
select(vaše_jméno, starts_with("day")) %>%
pivot_longer(starts_with("day"), names_to = "day", values_to = "time") %>%
separate_rows(time, sep = ",") %>%
mutate(day = str_remove(day, "day_"),
day = fct_relevel(day, "pondělí",
"úterý",
"středa",
"čtvrtek",
"pátek"),
time = fct_explicit_na(time, na_level = "none"),
time = fct_relevel(time,
"9.00-10.30am",
"10.30am-12.00pm",
"12.00-1.30pm",
"1.30-3.00pm",
"3.00-4.30pm",
"none"),
time_category = ifelse(time %in% c("9.00-10.30am", "10.30am-12.00pm"),
"morning",
"afternoon"))
View(ercel_data)
#create the final data using different processing steps
ercel_data <- read_csv(file = "Data/ercel_questionnaire_data.csv") %>%
# filter(Finished == TRUE) %>%
select(vaše_jméno, starts_with("day")) %>%
pivot_longer(starts_with("day"), names_to = "day", values_to = "time") %>%
separate_rows(time, sep = ",") %>%
mutate(day = str_remove(day, "day_"),
day = fct_relevel(day, "pondělí",
"úterý",
"středa",
"čtvrtek",
"pátek"),
time = fct_explicit_na(time, na_level = "none"),
time = fct_relevel(time,
"9.00-10.30am",
"10.30am-12.00pm",
"12.00-1.30pm",
"1.30-3.00pm",
"3.00-4.30pm",
"none"),
time_category = ifelse(time %in% c("9.00-10.30am", "10.30am-12.00pm"),
"morning",
"afternoon"))
str_remove("day_1,.day_2", ".")
str_remove("day_1,.day_2", "\.")
str_remove("day_1,.day_2", "\\.")
glimpse(ercel_data)
